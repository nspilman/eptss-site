// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response> | Response | Promise<void> | void
}


// Validate ../../app/admin/[slug]/page.tsx
{
  const handler = {} as typeof import("../../app/admin/[slug]/page.js")
  handler satisfies AppPageConfig<"/admin/[slug]">
}

// Validate ../../app/admin/page.tsx
{
  const handler = {} as typeof import("../../app/admin/page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ../../app/auth/password/page.tsx
{
  const handler = {} as typeof import("../../app/auth/password/page.js")
  handler satisfies AppPageConfig<"/auth/password">
}

// Validate ../../app/blog/[slug]/page.tsx
{
  const handler = {} as typeof import("../../app/blog/[slug]/page.js")
  handler satisfies AppPageConfig<"/blog/[slug]">
}

// Validate ../../app/blog/page.tsx
{
  const handler = {} as typeof import("../../app/blog/page.js")
  handler satisfies AppPageConfig<"/blog">
}

// Validate ../../app/callback/page.tsx
{
  const handler = {} as typeof import("../../app/callback/page.js")
  handler satisfies AppPageConfig<"/callback">
}

// Validate ../../app/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/faq/page.tsx
{
  const handler = {} as typeof import("../../app/faq/page.js")
  handler satisfies AppPageConfig<"/faq">
}

// Validate ../../app/feedback/page.tsx
{
  const handler = {} as typeof import("../../app/feedback/page.js")
  handler satisfies AppPageConfig<"/feedback">
}

// Validate ../../app/health/page.tsx
{
  const handler = {} as typeof import("../../app/health/page.js")
  handler satisfies AppPageConfig<"/health">
}

// Validate ../../app/home/page.tsx
{
  const handler = {} as typeof import("../../app/home/page.js")
  handler satisfies AppPageConfig<"/home">
}

// Validate ../../app/login/page.tsx
{
  const handler = {} as typeof import("../../app/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/privacy-policy/page.tsx
{
  const handler = {} as typeof import("../../app/privacy-policy/page.js")
  handler satisfies AppPageConfig<"/privacy-policy">
}

// Validate ../../app/profile/page.tsx
{
  const handler = {} as typeof import("../../app/profile/page.js")
  handler satisfies AppPageConfig<"/profile">
}

// Validate ../../app/reporting/page.tsx
{
  const handler = {} as typeof import("../../app/reporting/page.js")
  handler satisfies AppPageConfig<"/reporting">
}

// Validate ../../app/round/[slug]/page.tsx
{
  const handler = {} as typeof import("../../app/round/[slug]/page.js")
  handler satisfies AppPageConfig<"/round/[slug]">
}

// Validate ../../app/rounds/page.tsx
{
  const handler = {} as typeof import("../../app/rounds/page.js")
  handler satisfies AppPageConfig<"/rounds">
}

// Validate ../../app/sign-up/[slug]/page.tsx
{
  const handler = {} as typeof import("../../app/sign-up/[slug]/page.js")
  handler satisfies AppPageConfig<"/sign-up/[slug]">
}

// Validate ../../app/sign-up/page.tsx
{
  const handler = {} as typeof import("../../app/sign-up/page.js")
  handler satisfies AppPageConfig<"/sign-up">
}

// Validate ../../app/submit/[roundId]/page.tsx
{
  const handler = {} as typeof import("../../app/submit/[roundId]/page.js")
  handler satisfies AppPageConfig<"/submit/[roundId]">
}

// Validate ../../app/submit/page.tsx
{
  const handler = {} as typeof import("../../app/submit/page.js")
  handler satisfies AppPageConfig<"/submit">
}

// Validate ../../app/terms-of-service/page.tsx
{
  const handler = {} as typeof import("../../app/terms-of-service/page.js")
  handler satisfies AppPageConfig<"/terms-of-service">
}

// Validate ../../app/voting/[slug]/page.tsx
{
  const handler = {} as typeof import("../../app/voting/[slug]/page.js")
  handler satisfies AppPageConfig<"/voting/[slug]">
}

// Validate ../../app/voting/page.tsx
{
  const handler = {} as typeof import("../../app/voting/page.js")
  handler satisfies AppPageConfig<"/voting">
}

// Validate ../../app/waitlist/page.tsx
{
  const handler = {} as typeof import("../../app/waitlist/page.js")
  handler satisfies AppPageConfig<"/waitlist">
}

// Validate ../../app/api/cron/assign-round-song/route.ts
{
  const handler = {} as typeof import("../../app/api/cron/assign-round-song/route.js")
  handler satisfies RouteHandlerConfig<"/api/cron/assign-round-song">
}

// Validate ../../app/api/cron/create-future-rounds/route.ts
{
  const handler = {} as typeof import("../../app/api/cron/create-future-rounds/route.js")
  handler satisfies RouteHandlerConfig<"/api/cron/create-future-rounds">
}

// Validate ../../app/api/cron/send-reminder-emails/route.ts
{
  const handler = {} as typeof import("../../app/api/cron/send-reminder-emails/route.js")
  handler satisfies RouteHandlerConfig<"/api/cron/send-reminder-emails">
}

// Validate ../../app/api/profile/update/route.ts
{
  const handler = {} as typeof import("../../app/api/profile/update/route.js")
  handler satisfies RouteHandlerConfig<"/api/profile/update">
}

// Validate ../../app/api/round-info/route.ts
{
  const handler = {} as typeof import("../../app/api/round-info/route.js")
  handler satisfies RouteHandlerConfig<"/api/round-info">
}

// Validate ../../app/api/round/current/route.ts
{
  const handler = {} as typeof import("../../app/api/round/current/route.js")
  handler satisfies RouteHandlerConfig<"/api/round/current">
}

// Validate ../../app/api/rounds/route.ts
{
  const handler = {} as typeof import("../../app/api/rounds/route.js")
  handler satisfies RouteHandlerConfig<"/api/rounds">
}

// Validate ../../app/api/test-report/route.ts
{
  const handler = {} as typeof import("../../app/api/test-report/route.js")
  handler satisfies RouteHandlerConfig<"/api/test-report">
}

// Validate ../../app/auth/callback/route.ts
{
  const handler = {} as typeof import("../../app/auth/callback/route.js")
  handler satisfies RouteHandlerConfig<"/auth/callback">
}

// Validate ../../app/auth/create-user/route.ts
{
  const handler = {} as typeof import("../../app/auth/create-user/route.js")
  handler satisfies RouteHandlerConfig<"/auth/create-user">
}

// Validate ../../app/auth/google/callback/route.ts
{
  const handler = {} as typeof import("../../app/auth/google/callback/route.js")
  handler satisfies RouteHandlerConfig<"/auth/google/callback">
}





// Validate ../../app/auth/layout.tsx
{
  const handler = {} as typeof import("../../app/auth/layout.js")
  handler satisfies LayoutConfig<"/auth">
}

// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
